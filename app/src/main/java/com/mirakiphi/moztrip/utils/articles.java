package com.mirakiphi.moztrip.utils;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.StaggeredGridLayoutManager;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RatingBar;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.mirakiphi.moztrip.R;
import com.stanko.tools.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class articles extends AppCompatActivity {

    private RecyclerView mArticleList;
    private articles_adapter mAdapter;
    private RequestQueue requestQueue;
    private ProgressDialog pdLoading;
    private RatingBar rat1, rat2, rat3, rat4, rat5;
    private EditText textReview;
    private Button giveReview;
    private static String ticket_no;
    int MY_SOCKET_TIMEOUT_MS = 10000;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_articles);
        IntentIntegrator integrator = new IntentIntegrator(articles.this);
        integrator.setDesiredBarcodeFormats(IntentIntegrator.QR_CODE_TYPES);
        integrator.setPrompt("Scan QR code generated by sender");
        integrator.setBeepEnabled(true);
        integrator.setCameraId(0);
        integrator.setOrientationLocked(false);
        integrator.setBarcodeImageEnabled(false);
        integrator.initiateScan();
    }

    //Scan Result
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        final IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);
        if (result != null) {
            if (result.getContents() == null) {
                Toast.makeText(this, "You have cancelled the scanning", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "" + result.getContents(), Toast.LENGTH_SHORT).show();
                ticket_no = result.getContents();
                FirebaseDatabase database = FirebaseDatabase.getInstance();

                final DatabaseReference myRef = database.getReference("feedback");
                rat1 = (RatingBar) findViewById(R.id.ratingBar1);
                rat2 = (RatingBar) findViewById(R.id.ratingBar2);
                rat3 = (RatingBar) findViewById(R.id.ratingBar3);
                rat4 = (RatingBar) findViewById(R.id.ratingBar4);
                rat5 = (RatingBar) findViewById(R.id.ratingBar5);
                textReview = (EditText) findViewById(R.id.feedback_text);
                giveReview = (Button) findViewById(R.id.submit);
                giveReview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        float a1 = rat1.getRating();
                        float a2 = rat2.getRating();
                        // Toast.makeText(articles.this, ""+a2, Toast.LENGTH_SHORT).show();
                        float a3 = rat3.getRating();
                        float a4 = rat4.getRating();
                        float a5 = rat5.getRating();
                        Map<String, Float> users = new HashMap<>();
                        users.put("rating1", a1);
                        users.put("rating2", a2);
                        users.put("rating3", a3);
                        users.put("rating4", a4);
                        users.put("rating5", a5);
                        myRef.child(ticket_no).setValue(users);
                        if (textReview.getText().toString().equals("")) {
                            Toast.makeText(articles.this, "feedback is empty", Toast.LENGTH_SHORT).show();
                        } else {
                            myRef.child(ticket_no).child("string review").setValue(textReview.getText().toString());
                            //Toast.makeText(articles.this, "Your response has successfully recorded..", Toast.LENGTH_SHORT).show();
                            AlertDialog.Builder builder1 = new AlertDialog.Builder(articles.this);
                            builder1.setMessage("Your review has been successfully saved...");
                            builder1.setCancelable(true);

                            builder1.setPositiveButton(
                                    "Ok",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
                                            finish();
                                        }
                                    });

                            AlertDialog alert11 = builder1.create();
                            blockchain(ticket_no,a1, a2, a3, a4, a5, textReview.getText().toString());
                            alert11.show();
                        }
                    }
                });
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    private void blockchain(final String id, final float a1, final float a2, final float a3, final float a4, final float a5, final String review) {
        StringRequest stringRequest = new StringRequest(Request.Method.POST,"http://192.168.43.135/c/pro/index.php",
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try {
                            String result = response.toString();
                            Log.d("block",""+result);
                            Toast.makeText(articles.this, ""+result, Toast.LENGTH_SHORT).show();
                        } catch (Exception e) {
                            Toast.makeText(articles.this, "error occured", Toast.LENGTH_SHORT).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Toast.makeText(articles.this, "volley error" + error, Toast.LENGTH_SHORT).show();
                    }
                }) {
            @Override
            protected Map<String, String> getParams() {
                Map<String, String> params = new HashMap<String, String>();
                params.put("tourist_id",""+id);
                params.put("feed1",""+a1);
                params.put("feed2",""+a2);
                params.put("feed3",""+a3);
                params.put("feed4",""+a4);
                params.put("feed5",""+a5);
                params.put("feedback",review);
                return params;
            }

        };
        stringRequest.setRetryPolicy(new DefaultRetryPolicy(
                MY_SOCKET_TIMEOUT_MS,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));

        RequestQueue requestQueue = Volley.newRequestQueue(articles.this);
        requestQueue.add(stringRequest);
    }
}
